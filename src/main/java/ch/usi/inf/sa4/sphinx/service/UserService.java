package ch.usi.inf.sa4.sphinx.service;


import ch.usi.inf.sa4.sphinx.misc.ImproperImplementationException;
import ch.usi.inf.sa4.sphinx.model.Device;
import ch.usi.inf.sa4.sphinx.model.Room;
import ch.usi.inf.sa4.sphinx.model.User;
import lombok.NonNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.validation.ConstraintViolationException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;


/**
 * User service.
 * It has methods to interact with User entities.
 * In general it implements a layer of abstraction over the storage.
 *
 * @see User
 */
@Service
public class UserService {
    @Autowired
    private UserStorage userStorage;
    @Autowired
    private RoomStorage roomStorage;
    @Autowired
    private RoomService roomService;
    @Autowired
    private DeviceService deviceService;
    @Autowired
    private DeviceStorage deviceStorage;

    //Will be used to check that each room belongs to a single user
    private static final HashMap<String, String> roomToUser = new HashMap<>();


    /**
     * @deprecated Do not use directly this constructor
     */
    //Needed public otherwise context creation will fail...
    @Deprecated
    public UserService() {
    }


    /**
     * getter for User
     *
     * @param username the username
     * @return Returns the User with the given name if present in the storage
     */
    public Optional<User> get(final String username) {
        return userStorage.findByUsername(username);
    }


    /**
     * gets a User by mail {@code email} from storage
     *
     * @param email email of the user
     * @return the user with the given email or null if not found
     */
    public Optional<User> getByMail(final String email) {
        return userStorage.findByEmail(email);
    }


    /**
     * Deletes the user and its rooms and devices
     *
     * @param username username of the User that needs to be deleted
     */
    public void delete(final String username) {
        userStorage.deleteByUsername(username);
    }


    /**
     * Saves the given User in storage
     *
     * @param user the User to save
     * @return true if success else false
     */
    public boolean insert(final User user) {
        if (user.getId() != null || user.getPassword() == null) return false;
        user.createResetCode();
        userStorage.save(user);
        return true;
    }


    /**
     * Updates the given user, the username is used to find the User and the given User to update its fields
     *
     * @param user the User with updated fields
     * @return true if successful update else false
     */
    public boolean update(@NonNull final User user) {
        if (!userStorage.existsById(user.getId())) return false;

        userStorage.save(user);
        return true;
    }


    /**
     * Adds the given room to the User, notice that both will be saved in Storage. The id of the room is generated by
     * the storage and returned.
     *
     * @param username username of the User
     * @param room     the Room to be added to the User
     * @return the id of the room
     */
    public Optional<Integer> addRoom(final String username, final Room room) {
        final Optional<User> user = userStorage.findByUsername(username);

        return user.map(u -> {
            room.setUser(u);
            return Optional.of(roomStorage.save(room).getId());
        }).orElse(Optional.empty());
    }


    /**
     * Removes a given room.
     *
     * @param username the name of the User whose room is to be removed
     * @param roomId   the id of the room to remove
     * @return true if the operation succeeds else false
     */
    public boolean removeRoom(final String username, final Integer roomId) {
        if (!ownsRoom(username, roomId)) {
            return false;
        }
//

        final Optional<User> user = userStorage.findByUsername(username);
        user.ifPresent(
                u -> {
                    u.removeRoom(roomId);
                    userStorage.save(u);
                }
        );
        return user.isPresent();
    }


    /**
     * Getter for device(s).
     *
     * @param username username of the given User
     * @return Id of the Device(s) belonging to a given User
     */
    public Optional<List<Integer>> getDevices(final String username) {
        return getPopulatedDevices(username).map(devices ->
                devices.stream().map(Device::getId).collect(Collectors.toList())
        );
    }


    /**
     * Assert ownership of a Device
     *
     * @param username the username of the desired User
     * @param deviceId the id of the device
     * @return true if the User with the given Username owns the divice with the given Id
     */
    public boolean ownsDevice(final String username, final Integer deviceId) {
        return getDevices(username)
                .map(ids -> ids.stream().anyMatch(id -> id.equals(deviceId))
                ).orElse(false);
    }


    /**
     * Returns a list of rooms of this user.
     *
     * @param username User of these/this room/s
     * @return a list of rooms
     */
    @Transactional
    public List<Room> getPopulatedRooms(final String username) {
        return userStorage.findByUsername(username).map(User::getRooms).orElse(new ArrayList<>());
    }

    /**
     * Assert ownership of a room
     *
     * @param username the username of the desired User
     * @param roomId   the id of the room
     * @return true if the User with the given Username owns the room with the given Id, else false
     */
    public boolean ownsRoom(@NonNull final String username, final Integer roomId) {
        return userStorage.findByUsername(username)
                .map(user -> user.getRooms().stream().anyMatch(r -> r.getId().equals(roomId)))
                .orElse(false);
    }


    /**
     * Returns a populated list of Device(s) owned by a given User
     *
     * @param username username of required User
     * @return Devices owned by User
     */
    public Optional<List<Device>> getPopulatedDevices(final String username) {
        return userStorage.findByUsername(username)
                .map(u -> u.getRooms().stream().flatMap(
                        r -> r.getDevices().stream()).collect(Collectors.toList()));
    }


    /**
     * Checks if the given session token is a match to the one in Storage
     *
     * @param username     the username of the User
     * @param sessionToken the session token
     * @return true if they match, false if the User does not exist or they don't match
     */
    public boolean validSession(@NonNull final String username, @NonNull final String sessionToken) {
        return userStorage.findByUsername(username)
                .map(user -> sessionToken.equals(user.getSessionToken())).orElse(false);
    }


    /**
     * Removes a device that the User owns
     *
     * @param username the username whose device is to be removed
     * @param deviceId the id of the device to be removed
     */
    public void removeDevice(final String username, final Integer deviceId) {
        if (ownsDevice(username, deviceId)) {
            deviceStorage.deleteById(deviceId);
        }
    }


    public Optional<User> getById(final Integer id) {
        return userStorage.findById(id);
    }


    /**
     * Assert if Device has been moved
     *
     * @param username    the owner of the device and rooms
     * @param deviceId    the id of the device to Migrate
     * @param startRoomId the room the device sits in
     * @param endRoomId   the room the device should end in
     * @return true if success else false
     */
    @Transactional
    public boolean migrateDevice(final String username, final Integer deviceId, final Integer startRoomId,
                                 final Integer endRoomId) {

        if (!ownsRoom(username, startRoomId) || !ownsRoom(username, endRoomId) || !ownsDevice(username, deviceId)) {
            return false;
        }

        final Room startRoom = roomStorage.findById(startRoomId)
                .orElseThrow(() -> new ImproperImplementationException("the method ownsRoom doesnt work properly"));

        if (!startRoom.getDevicesIds().contains(deviceId)) {
            return false;
        }

        return roomStorage.findById(endRoomId).map(room -> deviceStorage.findById(deviceId).map(device -> {
            device.setRoom(room);
            deviceStorage.save(device);
            return true;
        }).orElse(false)).orElse(false);
    }

    /**
     * Assert ownership of a room
     * returns the id of the room that owns the device given a the owning user and the room id
     *
     * @param username username of the room owner
     * @param deviceId id of the owned device
     * @return the id of the room containing the device
     */
    public Integer owningRoom(final String username, final Integer deviceId) {
        final var rooms = getPopulatedRooms(username);
        for (final Room r : rooms) {
            if (r.getDevicesIds().contains(deviceId)) {
                return r.getId();
            }
        }
        return null;
    }

    /**
     * Changes the name of a User identified by {@code oldUsername}
     *
     * @param oldUsername the old name of the user
     * @param newUsername the new name of the user
     * @return true if successful else false
     */
    public boolean changeUsername(@NonNull final String oldUsername, @NonNull final String newUsername) {
        if (newUsername == null) return false;
        try {
            return userStorage.findByUsername(oldUsername).map(user -> {
                user.setUsername(newUsername);
                userStorage.save(user);
                return true;
            }).orElse(false);


        } catch (final ConstraintViolationException e) {
            return false;
        }


    }



    //returns the hashed password of a user
    private Optional<String> getUserHash(@NonNull String username) {
        return get(username).map(User::getPassword);


    }


    public boolean removeGuest(final String username1, final String username2){
        if(!isGuestOf(username1,username2)){
            return false;
        }
        final Optional<User> user = userStorage.findByUsername(username1);
        final Optional<User> guest = userStorage.findByUsername(username2);

        user.get().removeGuestOf(guest.get());


        user.ifPresent(
                u -> {
                    u.removeGuestOf(guest.get());
                    userStorage.save(u);
                }
        );

        //userStorage.update(user);
        return true;
    }

    public Optional<User> addGuest(final String username1, final String username2){
        final Optional<User> user = userStorage.findByUsername(username1);
        final Optional<User> guest = userStorage.findByUsername(username2);

        if(user == null || guest ==null){
            return null;
        }

       user.get().addGuestOf( guest.get());

        return guest;


    }


    /** Returns a list of the guests.
     * @param username the user's username
     * @return a list of the guests
     **/
    public List<User> getGuests(final String username){
        Optional<User> user =  userStorage.findByUsername(username);
        return user.orElse(null).getGuestsOf();
    }

    /**
     * Determines if user is a guest of second user.
     * @param username1 the user's' username
     * @param username2  the second user's username
     * @return true if the user is considered the second's guest
     */
    public boolean isGuestOf(String username1, String username2){
        Optional<User> user = userStorage.findByUsername(username1);
        Optional<User> guest = userStorage.findByUsername(username2);
        if(user == null || guest == null){
            return false;
        }
        return user.get().getGuestsOf().contains(guest.get());
    }

    /**
     * @param username the name of the user
     * @return all the guests of a given user
     */
    public List<User> returnGuests(@NonNull final String username) {
        return userStorage.findAll().stream().filter(user -> {
            return user.getGuestsOf().stream().map(User::getUsername).anyMatch(s -> {
                return s.equals(username);
            });
        }).collect(Collectors.toList());
    }



}
